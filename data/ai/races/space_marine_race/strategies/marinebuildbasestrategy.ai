----------------------------------------
-- File: 'marinebuildbasestrategy.ai'
-- Edited by Thudmeizer @ 07.03.2008

class 'MarineBuildBaseStrategy' (BuildBaseStrategy)

function MarineBuildBaseStrategy:__init( baseinfo ) super( baseinfo )

	-- Add detector units (Best first, worst last)
	self:AddDetectorUnit("space_marine_squad_librarian")
	self:AddDetectorUnit("space_marine_squad_skull_probe")
end

function MarineBuildBaseStrategy:ChooseBuildProgram()

	-- Check build program count
	if (table.getn(self.info.BuildPrograms) ~= 4) then
		return BuildBaseStrategy.ChooseBuildProgram(self)
	end

	-- Get map size and closest enemy distance
	local sMapSize, iClosestEnemyDistance = self:GetMapSize()
		
	-- Set probabilities of the strategies according to the map size
	local iBuildProgram1	-- Basic strategy
	local iBuildProgram2	-- Marine rush
	local iBuildProgram3	-- Assault rush
	local iBuildProgram4	-- Vehicle rush
	if (sMapSize == "small" or iClosestEnemyDistance <= 70 or cpu_manager.iPlayerCount == 2) then
	
		iBuildProgram1 = 40
		iBuildProgram2 = 30
		iBuildProgram3 = 30
		iBuildProgram4 = 0
		
	elseif (sMapSize == "large" and cpu_manager.iPlayerCount >= 6) then
	
		iBuildProgram1 = 40
		iBuildProgram2 = 20
		iBuildProgram3 = 20
		iBuildProgram4 = 20
	else
	
		iBuildProgram1 = 40
		iBuildProgram2 = 30
		iBuildProgram3 = 30
		iBuildProgram4 = 0
	end
	
	-- Modify probabilities according to the closest enemy player
	local oEnemy = cpu_manager:FindClosestEnemyPlayer(false)
	local sEnemy = oEnemy:GetPlayerRaceName()		
	if (sEnemy == "ork_race") then
	
		iBuildProgram2 = iBuildProgram2 + 10
		iBuildProgram3 = iBuildProgram3 - 10

	elseif (sEnemy == "eldar_race" or sEnemy == "guard_race" or sEnemy == "tau_race" or sEnemy == "necron_race") then

		iBuildProgram1 = iBuildProgram1 - 10
		iBuildProgram2 = iBuildProgram2 - 10
		iBuildProgram3 = iBuildProgram3 + 20
	end
		
	-- Now choose a program
	iBuildProgram2 = iBuildProgram1 + iBuildProgram2
	iBuildProgram3 = iBuildProgram2 + iBuildProgram3
	iBuildProgram4 = iBuildProgram3 + iBuildProgram4
	local iRandom = math.random(1, 100)
	if (iRandom <= iBuildProgram1) then
		return 1
	elseif (iRandom <= iBuildProgram2) then
		return 2
	elseif (iRandom <= iBuildProgram3) then
		return 3
	elseif (iRandom <= iBuildProgram4) then
		return 4
	end
	return 1
end

function MarineBuildBaseStrategy:EvaluateSquadCap()

	-- Check squad cap
	if (self:CheckSquadCap(300, 0)) then
		
		local tBuildType = CpuBuildType()
		tBuildType.btype = CpuPrerequisites.BT_Research
		
		if (not cpu_manager.cpu_player:IsResearchComplete( "squad_cap_research" )) then
			tBuildType.name = "squad_cap_research"
		elseif not cpu_manager.cpu_player:IsResearchComplete( "squad_cap_research_1" ) then
			tBuildType.name = "squad_cap_research_1"
		else
			return
		end
		
		if (self:TryBuild( tBuildType )) then
			aitrace("BuildController: Dynamic research of "..tBuildType.name)
		end
	end
	
	-- Check support cap
	if (self:CheckSupportCap(150, 300)) then
		
		local tBuildType = CpuBuildType()
		tBuildType.btype = CpuPrerequisites.BT_Research
		
		if (not cpu_manager.cpu_player:IsResearchComplete( "support_cap_research" )) then
			tBuildType.name = "support_cap_research"
		elseif (not cpu_manager.cpu_player:IsResearchComplete( "support_cap_research_1" )) then
			tBuildType.name = "support_cap_research_1"
		elseif (not cpu_manager.cpu_player:IsResearchComplete( "support_cap_research_2" )) then
			tBuildType.name = "support_cap_research_2"
		elseif (not cpu_manager.cpu_player:IsResearchComplete( "support_cap_research_3" )) then
			tBuildType.name = "support_cap_research_3"
		else
			return
		end
		
		if (self:TryBuild( tBuildType )) then
			aitrace("BuildController: Dynamic research of "..tBuildType.name)
		end
	end
end

function MarineBuildBaseStrategy:GetBuildingName( sType )

	-- Return race specific object string
	if (sType == "HQ") then
		return "space_marine_hq"

	elseif (sType == "Generator") then
		return "space_marine_generator"
		
	elseif (sType == "BiggerGenerator") then
		return "space_marine_thermo_generator"
		
	elseif (sType == "VehicleBuilding") then
		return "space_marine_vehicle_building"
		
	elseif (sType == "ListeningPost") then
		return "space_marine_listening_post"
		
	elseif (sType == "Turret") then
		return "space_marine_turret_bolter"
		
	elseif (sType == "Mine") then
		return "space_marine_mine_field"
	end
	
	return nil
end

function MarineBuildBaseStrategy:GetAddonBuilding( sType )

	if (sType == "space_marine_turret_addon") then
		return "space_marine_turret_bolter"
		
	elseif (sType == "space_marine_list_post_addon_1") then
		return "space_marine_listening_post"
		
	elseif (sType == "space_marine_list_post_addon_2") then
		return "space_marine_listening_post"
		
	elseif (sType == "space_marine_hq_addon_1") then
		return "space_marine_hq"
		
	elseif (sType == "space_marine_hq_addon_2") then
		return "space_marine_hq"
	end
	return nil
end

-- Arkhan 01.2006: Inherited method to check if an addon is a tier addon
function MarineBuildBaseStrategy:IsTierAddon( sName, iTargetTier )

	-- Check addon name and target tier
	if (sName == "space_marine_hq_addon_1" and iTargetTier == 2) then
		return true
	elseif (sName == "space_marine_hq_addon_2" and iTargetTier == 3) then
		return true
	end
	return false
end

-- Arkhan 11.2005: Returns the squad cap and support cap of the given squad
function MarineBuildBaseStrategy:GetUnitStats(sSquadName)

	if (sSquadName == "space_marine_squad_scout") then
		return 1, 0
	elseif (sSquadName == "space_marine_squad_tactical") then
		return 2, 0
	elseif (sSquadName == "space_marine_squad_assault") then
		return 3, 0
	elseif (sSquadName == "space_marine_squad_grey_knights") then
		return 3, 0
	elseif (sSquadName == "space_marine_squad_terminator") then
		return 3, 0
	elseif (sSquadName == "space_marine_squad_terminator_assault") then
		return 3, 0
	elseif (sSquadName == "space_marine_squad_land_speeder") then
		return 0, 1
	elseif (sSquadName == "space_marine_squad_tempest") then
		return 0, 2
	elseif (sSquadName == "space_marine_squad_dreadnought") then
		return 0, 3
	elseif (sSquadName == "space_marine_squad_dreadnought_hellfire") then
		return 0, 3
	elseif (sSquadName == "space_marine_squad_whirlwind") then
		return 0, 4
	elseif (sSquadName == "space_marine_squad_predator") then
		return 0, 5
	elseif (sSquadName == "space_marine_squad_land_raider") then
		return 0, 3
	end
	return 0, 0
end

function MarineBuildBaseStrategy:UpdateTierLevel()

	-- Reset tier level
	self.tierLevel = 1
	
	-- Prepare
	local iHQAddon1ID = cpu_manager.stats:GetAddOnID("space_marine_hq_addon_1")
	local iHQAddon2ID = cpu_manager.stats:GetAddOnID("space_marine_hq_addon_2")
	local oStats = cpu_manager.stats:GetPlayerStatsFromID( cpu_manager.player_id )
	
	-- Check HQ's for addons
	for oBase in oStats:GetBases() do
	
		-- Check for valid building
		if (oBase:IsValid() and not oBase:IsListeningPost()) then

			-- Check for HQ addon 2
			if (oBase:HasAddOn(iHQAddon2ID)) then
			
				-- We still have the proper add-on
				if (cpu_manager.cpu_player:IsResearchComplete("marine_heavy_armor_deployment")) then
					self.tierLevel = 4
					return
				else
					self.tierLevel = 3
					return
				end
			
			-- Check for HQ addon 1
			elseif (oBase:HasAddOn(iHQAddon1ID)) then
				self.tierLevel = 2
			end
		end
	end
end

function MarineBuildBaseStrategy:BuildFlexible()

	-- Dynamic research item syntax: ResearchName, MinTier, RequisitionCost, PowerCost, MinSquadCap, MinSupportCap, SquadName, SquadMinCount
	local iArmyStrength = cpu_manager:GetArmyStrength()
	local iLibrarianSquads	= self:CountSquads("space_marine_squad_librarian")
	local iCommanderSquads	= self:CountSquads("space_marine_squad_force_commander") + self:CountSquads("space_marine_squad_chaplain") + iLibrarianSquads
	local iInfantrySquads	= self:CountSquads("space_marine_squad_scout") + self:CountSquads("space_marine_squad_tactical") + self:CountSquads("space_marine_squad_assault")
	
	-- Compute tier 1 researches
	if (self.tierLevel >= 1) then

		-- Compute infantry researches
		if (iInfantrySquads >= 3) then
			self:DynamicResearch("marine_frag_grenade_research", 1, 25, 75, 0, 0, "space_marine_squad_tactical", 2)
		end

		-- Compute secondary researches
		if (iArmyStrength >= 750) then

			-- Compute infantry researches
			if (iInfantrySquads >= 3) then
				self:DynamicResearch("marine_health_upgrade_research", 1, 50, 30, 0, 0, nil, 0)
				self:DynamicResearch("marine_accuracy_upgrade_research", 1, 50, 30, 0, 0, nil, 0)
			end
		end
		
		-- Compute bonus researches
		if (iArmyStrength >= 1250) then
		
			-- Compute infantry researches
			if (iInfantrySquads >= 3) then
				self:DynamicResearch("marine_sergeant_melee_upgrade_1", 1, 65, 25, 0, 0, "space_marine_squad_assault", 2)
				self:DynamicResearch("marine_sniper_rifle", 1, 75, 35, 0, 0, "space_marine_squad_scout", 2)
			end
			
			-- Compute skull probe researches
			self:DynamicResearch("marine_skull_probe_infiltrate_research", 1, 50, 50, 0, 0, "space_marine_squad_skull_probe", 1)
		end
	end
	
	-- Compute tier 2 researches
	if (self.tierLevel >= 2) then
	
		-- Compute infantry researches
		if (iInfantrySquads >= 3) then
			self:DynamicResearch("marine_health_upgrade_research_2", 2, 100, 50, 0, 0, nil, 0)
			self:DynamicResearch("marine_sergeant_ranged_upgrade_1", 2, 60, 35, 0, 0, nil, 0)
		end
		
		-- Compute commander researches
		if (iLibrarianSquads >= 1) then
			self:DynamicResearch("marine_force_commander_ability_research_1", 2, 80, 35, 0, 0, "space_marine_squad_force_commander", 1)
			self:DynamicResearch("marine_commander_health_research_1", 2, 100, 25, 0, 0, nil, 0)
			self:DynamicResearch("marine_librarian_research_1", 2, 75, 40, 0, 0, "space_marine_squad_librarian", 1)
		end
		
		-- Compute secondary researches
		if (iArmyStrength >= 1250) then
		
			-- Compute infantry researches
			if (iInfantrySquads >= 3) then
				self:DynamicResearch("marine_accuracy_upgrade_research_2", 2, 100, 50, 0, 0, nil, 0)
				self:DynamicResearch("marine_melta_bomb_research", 2, 75, 75, 0, 0, "space_marine_squad_assault", 2)
			end
			
			-- Compute grey knight researches
			self:DynamicResearch("marine_quickening_research", 2, 75, 50, 0, 0, "space_marine_squad_grey_knights", 1)
		end
		
		-- Compute bonus researches
		if (iArmyStrength >= 1750) then
					
			-- Compute infantry researches
			if (iInfantrySquads >= 3) then
				self:DynamicResearch("marine_max_weapons_research", 2, 25, 75, 0, 0, "space_marine_squad_tactical", 2)
				self:DynamicResearch("marine_sergeant_melee_upgrade_2", 2, 75, 40, 0, 0, "space_marine_squad_assault", 2)
				self:DynamicResearch("marine_scout_infiltrate_research", 2, 100, 150, 0, 0, "space_marine_squad_scout", 2)
			end
		
			-- Compute vehicle researches
			self:DynamicResearch("marine_smoke_launcher_research", 2, 75, 25, 0, 0, "space_marine_squad_rhino", 2)
		end
	end
	
	-- Compute tier 3 researches
	if (self.tierLevel >= 3) then
	
		-- Compute commander researches
		if (iCommanderSquads >= 1) then
			self:DynamicResearch("marine_librarian_research_2", 3, 40, 75, 0, 0, "space_marine_squad_librarian", 1)
		end

		-- Compute secondary researches
		if (iArmyStrength >= 1750) then

			-- Compute commander researches
			if (iCommanderSquads >= 1) then
				self:DynamicResearch("marine_commander_health_research_2", 3, 125, 50, 0, 0, nil, 0)
				self:DynamicResearch("marine_force_commander_research_2", 3, 100, 50, 0, 0, "space_marine_squad_force_commander", 1)
			end
		end
		
		-- Compute bonus researches
		if (iArmyStrength >= 2250) then

			-- Compute terminator researches
			if (self:CountSquads("space_marine_squad_terminator") + self:CountSquads("space_marine_squad_terminator_assault") >= 1) then
				self:DynamicResearch("marine_personalteleporter_research", 3, 75, 125, 0, 0, nil, 0)
			end
		end
	end

	-- Restrict dynamic builds to hard difficulty or higher
	if (CpuManager.AISettings.bMultiBuildings) then
	
		-- Dynamic buildings
		-- Item-Syntax: BuildingName, BuildingCount, MinTier, MinRequisition, MinPower, MinSquadCap, MinSupportCap
		self:DynamicBuild("space_marine_barracks", 2, 1, 800, 0, 0, 0)
		self:DynamicBuild("space_marine_vehicle_building", 2, 2, 200, 600, 0, 0)
		self:DynamicBuild("space_marine_barracks", 3, 3, 2000, 0, 0, 0)
		self:DynamicBuild("space_marine_vehicle_building", 3, 3, 500, 1500, 0, 0)
		self:DynamicBuild("space_marine_hq", 2, 2, 1500, 0, 0, 0)
	end
end

-- Arkhan 01.2006: Method to check if force tech should be computed
function MarineBuildBaseStrategy:ForceTech()

	-- Check time
	if (g_iGMT < 60 * CpuManager.ForceTech.StartTier1) then
		return false
	end
	
	-- Check ressources
	local iRequisition = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition )
	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )

	-- Check tier
	local iTierLevel = self:GetTierLevel()
	if (iTierLevel == 1) then
	
		-- Check resources
		if (iRequisition > 600 and iPower > 200) then
			return false
		end
		return not self.m_bHQAddon1
		
	elseif (iTierLevel == 2) then

		-- Check current build program
		if (self.m_iCurrentBuildProgram == 2) then

			-- Check build channel for ability building
			if (self:GetBuildingCountByName("space_marine_ability_building", false) < 1) then
				return true
			end		
		else
		
			-- Check build channel for machine cult
			if (self:GetBuildingCountByName("space_marine_vehicle_building", false) < 1) then
				return true
			end
		end
		
		-- Check time
		if (g_iGMT > 60 * CpuManager.ForceTech.StartTier2 and (iRequisition < 600 or iPower < 600)) then
			return true
		end
		
	elseif (iTierLevel == 3) then	

		-- Check time
		if (g_iGMT > 60 * CpuManager.ForceTech.StartTier3 and (iRequisition < 600 or iPower < 600)) then
			return true
		end
	end
	return false
end

-- Arkhan 03.2006: Return placement type for buildings
function MarineBuildBaseStrategy:GetPlacementType(iBuildingID)
	
	-- Check building
	if (cpu_manager:IsHQ(iBuildingID)) then
		return "HQ"
	elseif (iBuildingID == cpu_manager.stats:GetBuildingID("space_marine_barracks") or
			iBuildingID == cpu_manager.stats:GetBuildingID("space_marine_vehicle_building")) then
		return "Military"
	elseif (cpu_manager:IsTurret(iBuildingID)) then
		return "Front2"
	elseif (cpu_manager:IsMine(iBuildingID)) then
		return "Mine"
	elseif (cpu_manager:IsGenerator(iBuildingID) or
			iBuildingID == cpu_manager.stats:GetBuildingID("space_marine_armoury")) then
		return "BaseBack"
	end
	return "Basic"
end
-- Arkhan 03.2006: Inherited method to modify squad demand
function MarineBuildBaseStrategy:ModifySquadDemand(iUnitID)

	-- No more apothecaries then squads 
	if (iUnitID == cpu_manager.stats:GetSquadID("space_marine_squad_apothecary")) then
		
		-- Check number of attachable squads 
		local apoth_attach = function ( squad_ai )
			return (squad_ai:GetTactic():GetUnitStrength() >= 250 and squad_ai:CanReceiveAttachment())
		end
		local num_attach = self:CountSquads("space_marine_squad_scout", apoth_attach) +
				   self:CountSquads("space_marine_squad_tactical", apoth_attach) +
				   self:CountSquads("space_marine_squad_grey_knights", apoth_attach) +
				   self:CountSquads("space_marine_squad_terminator_assault", apoth_attach) + 
				   self:CountSquads("space_marine_squad_terminator", apoth_attach) 
 
 		-- Check apo count
		local num_apo = self:CountSquads("space_marine_squad_apothecary")
		if (num_apo >= num_attach) then
			return 0
		end	
	end

	-- No more skullprobes then squads 
	if (iUnitID == cpu_manager.stats:GetSquadID("space_marine_squad_skull_probe")) then
		
		-- Check number of attachable squads 
		local skullprobe_attach = function ( squad_ai )
			return (squad_ai:GetTactic():GetUnitStrength() >= 250 and squad_ai:CanReceiveAttachment())
		end
		local num_attach = self:CountSquads("space_marine_squad_scout", skullprobe_attach) +
				   self:CountSquads("space_marine_squad_tactical", skullprobe_attach) +
				   self:CountSquads("space_marine_squad_grey_knights", skullprobe_attach) +
				   self:CountSquads("space_marine_squad_terminator_assault", skullprobe_attach) + 
				   self:CountSquads("space_marine_squad_terminator", skullprobe_attach) 
 
 		-- Check skullprobe count
		local num_skuprobe = self:CountSquads("space_marine_squad_skull_probe")
		if (2 * num_skuprobe >= num_attach) then
			return 0
		end	
	end
	
	-- Only build rhinos if we've full support cap
	if (iUnitID == cpu_manager.stats:GetSquadID("space_marine_squad_rhino")) then
		
		-- Check army strength
		if (cpu_manager:GetArmyStrength() < 4000) then
			return 0
		end
	end

	return BuildBaseStrategy.ModifySquadDemand(self, iUnitID)
end

-- Arkhan 11.2006: Virtual method for checking out relic units
function MarineBuildBaseStrategy:RelicRequired(sName)

	-- Check name
	if (sName == "space_marine_squad_land_raider") then
		return true
	end
	return false
end