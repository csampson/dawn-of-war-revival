import ("Plans/BuildPlan.ai")

class 'BuildAddOnPlan' (BuildPlan)

function BuildAddOnPlan:__init( addon_id ) super(  CpuPlayer.CT_BuildAddOns )

	BuildPlan.SetItemID( self, addon_id )
	BuildPlan.SetItemName( self, cpu_manager.stats:GetAddOnName( addon_id ) )

	Plan.SetNeeds( self, "Asking for builder", BuildAddOnPlan.ObtainBuilder )
	Plan.SetState( self, "Wanting to build: "..self.item_name, BuildAddOnPlan.BuildAddOn )

	Plan.SetName( self, "Build AddOn Plan" )
end

function BuildAddOnPlan:ObtainBuilder()
	
	for build_channel in build_manager:GetUnlockedBuildChannelAIs() do

		--don't queue
		if( build_channel:IsBuilding() == 0 ) then
			
			--now build something!
			local item_index  = build_channel:GetItemIndexFromID(BuildChannelAI.PQ_AddOn, self.item_id )
			
			if( item_index ~= BuildChannelAI.INVALID_INDEX ) then
		
				if( build_channel:CanAddToQueue( BuildChannelAI.PQ_AddOn, self.item_id ) == BuildChannelAI.CANBUILD_Ok ) then
					
					--lock and save it!
					BuildPlan.SetBuilder( self, build_channel )
					
					--no needs
					Plan.SetNeeds( self, "No needs", Plan.NeedsFulfilled )

					return
					
				end
				
			end		
			
		end
			
	end
	
end

function BuildAddOnPlan:Retry()
	if (self.builder:CanAddToQueue( BuildChannelAI.PQ_AddOn, self.item_id ) == BuildChannelAI.CANBUILD_Ok) then
		self.builder:BuildAddOn( self.item_id )
		Plan.SetState( self, "Building a "..self.item_name, BuildPlan.BuildingState )
	end
end

function BuildAddOnPlan:BuildAddOn()

	if self.builder ~= nil then
		--build it!
		self.builder:BuildAddOn( self.item_id )

		--change state
		Plan.SetState( self, "Building a "..self.item_name, BuildPlan.BuildingState )
		return
	end
	
	aitrace( "can't build "..self.item_name )
end

